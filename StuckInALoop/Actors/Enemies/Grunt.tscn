[gd_scene load_steps=5 format=2]

[ext_resource path="res://cam/Assets/Enemy/Enemy.tscn" type="PackedScene" id=2]

[sub_resource type="GDScript" id=1]
script/source = "extends RigidBody2D

enum grunt_states {
	enter_idle,
	idle,
	enter_run,
	run,
	damage,
	death,
	enter_attack,
	attack
	}

enum grunt_ai {
	idle,
	chase,
	flee,
	wander
}

export var run_speed = 100
var target 
var current_state = grunt_states.enter_idle
var current_ai = grunt_ai.wander
var state_time = 0
var ai_time = 0 
var velocity = Vector2.ZERO
var move_input = Vector2.ZERO
var health = 3
var target_rotation = 0
var choose_wander_direction = true
var projectile = load(\"res://Pete/Bullet/Bullet.tscn\")
var damage = 1
onready var animator: AnimationPlayer = $Sprite/AnimationPlayer

func _on_DetectionArea_body_entered(body):
	target = body

func _on_DetectionArea_body_exited(_body):
	target = null

func _process(delta):
	state_time += delta
	ai_time += delta
	process_statemachine(delta)
	process_ai(delta)
	pass

func change_state(state):
	state_time = 0
	current_state = state
	pass

func change_ai(behaviour):
	ai_time = 0
	current_ai = behaviour
	pass

func distance_to_target():
	return (global_position - target.global_position).length()

func _integrate_forces(state):
	state.transform = Transform2D(target_rotation, state.transform.origin)
	state.angular_velocity = 0
	state.linear_velocity = velocity
	pass

var do_attack = false

func try_attack(delta):
	if (do_attack):
		attack_delay += delta;
		if (attack_delay > attack_cooldown):
			attack_delay = 0
			attack_cooldown = randf()*2 + 1
			change_state(grunt_states.enter_attack)

# warning-ignore:unused_argument
func process_statemachine(delta):
	match(current_state):
		grunt_states.enter_idle:
			animator.play(\"Idle\")
			velocity = Vector2.ZERO
			change_state(grunt_states.idle)
		
		grunt_states.idle:
			if (move_input.length() > .1):
				change_state(grunt_states.enter_run)
			try_attack(delta)
		
		grunt_states.enter_run:
			animator.play(\"Walk\")
			change_state(grunt_states.run)
			
		grunt_states.run:
			if (move_input.length() > .1):
				velocity = move_input * run_speed * (1+(float(Game.loops)*.3))
				if (velocity.length() > 1000):
					velocity = move_input * 1000
			else:
				change_state(grunt_states.enter_idle)
			try_attack(delta)
		
		grunt_states.enter_attack:
			animator.play(\"Attack\")
			do_attack = false
			change_state(grunt_states.attack)
			if (target != null):
				var bullet = projectile.instance()
				get_tree().current_scene.add_child(bullet)
				var bvelocity = (target.global_position - global_position).normalized()
				bullet.global_position = global_position + bvelocity * 50
				bullet.velocity = bvelocity
				bullet.damage = damage
				bullet.speed = 500
		
		grunt_states.attack:
			if (animator.is_playing() == false):
				change_state(grunt_states.enter_idle)
		
		grunt_states.damage:
			modulate = lerp(Color.white, Color.red, sin(state_time*10))
			if (state_time > .25):
				change_state(grunt_states.enter_idle)
				modulate = Color.white
		
		grunt_states.death:
			velocity = Vector2.ZERO
			modulate = Color.white
			if (!animator.is_playing()):
				queue_free()

		_: 
			change_state(grunt_states.enter_idle)

var attack_delay = 0
var attack_cooldown = randf()*2+1

# warning-ignore:unused_argument
func process_ai(delta):
	match(current_ai):
		grunt_ai.idle:
			move_input = Vector2.ZERO
			if (target != null):
				change_ai(grunt_ai.chase)
			if (ai_time > 1):
				change_ai(grunt_ai.wander)
		
		grunt_ai.chase:
			if (target == null):
				change_ai(grunt_ai.wander)
			else:
				move_input = (target.global_position - global_position).normalized()
				do_attack = true
				
		grunt_ai.wander:			
			if (choose_wander_direction):
				choose_wander_direction = false
				move_input = Vector2(randf()*2-1, randf()*2-1).normalized()
			if (ai_time > 1):
				change_ai(grunt_ai.idle)
				choose_wander_direction = true
			if (target != null):
				change_ai(grunt_ai.chase)
				choose_wander_direction = true
			
		_: 
			change_ai(grunt_ai.idle)
	pass



# warning-ignore:unused_signal
signal on_damage(amount, recoil_direction)

func _on_Grunt_on_damage(amount, recoil_direction):
	health -= amount	
	velocity = recoil_direction
	if (health <= 0):
		change_state(grunt_states.death)
		animator.play(\"Death\")
	else:
		change_state(grunt_states.damage)
"

[sub_resource type="CircleShape2D" id=2]
radius = 324.368

[sub_resource type="CapsuleShape2D" id=3]
radius = 16.4594
height = 43.44

[node name="Grunt" type="RigidBody2D"]
gravity_scale = 0.0
contacts_reported = 1
contact_monitor = true
can_sleep = false
script = SubResource( 1 )

[node name="DetectionArea" type="Area2D" parent="."]
collision_layer = 0
collision_mask = 2

[node name="DetectionShape" type="CollisionShape2D" parent="DetectionArea"]
position = Vector2( -1.05945, 0 )
shape = SubResource( 2 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource( 3 )

[node name="Sprite" parent="." instance=ExtResource( 2 )]
position = Vector2( 2.17875, -1.86256 )
scale = Vector2( 0.332567, 0.332567 )
[connection signal="on_damage" from="." to="." method="_on_Grunt_on_damage"]
[connection signal="body_entered" from="DetectionArea" to="." method="_on_DetectionArea_body_entered"]
[connection signal="body_exited" from="DetectionArea" to="." method="_on_DetectionArea_body_exited"]
