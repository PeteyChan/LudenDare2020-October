[gd_scene load_steps=6 format=2]

[ext_resource path="res://Pete/Player/cross_hair.png" type="Texture" id=1]
[ext_resource path="res://Rick/Assets/Player/_Player.tscn" type="PackedScene" id=2]

[sub_resource type="GDScript" id=1]
script/source = "extends RigidBody2D

export var run_speed = 200
export var dash_speed = 600
var state = PlayerStates.enter_idle
var state_time = 0
var target_velocity = Vector2.ZERO
onready var collider = $CollisionShape2D
onready var camera = $PlayerCamera
onready var target = $Target
onready var sprite = $Sprite
onready var animator : AnimationPlayer = $Sprite/AnimationPlayer
var hit_effect = load(\"res://Rick/Assets/FX/Hit_FX.tscn\")

var health = 10
var recoil_velocity = Vector2.ZERO
var god_mode = false

enum PlayerStates{
	enter_idle,
	idle,
	enter_run,
	run,
	enter_attack,
	attack,
	enter_dash
	dash,
	enter_damage,
	damage,
	death
}

# Called when the node enters the scene tree for the first time.
func _ready():
	Game.player = self

func _input(event):
	if event is InputEventMouseMotion:
		if (event.get_relative().length() > 1):
			controller = false

func move_reticle():
	if (state != PlayerStates.death):
		Input.set_mouse_mode(Input.MOUSE_MODE_HIDDEN)
		var x = Input.get_action_strength(\"player_look_right\") - Input.get_action_strength(\"player_look_left\")
		var y = -Input.get_action_strength(\"player_look_up\") + Input.get_action_strength(\"player_look_down\")
		if (Vector2(x,y).length() > .1):
			controller = true
			target.global_position = global_position + Vector2(x,y).normalized()*100
		
		if (!controller):
			target.global_position = target.get_global_mouse_position()

var controller = false
func look_at_target():
	if (target.global_position.x < global_position.x && sprite.scale.x > 0):
		sprite.scale.x *= -1
	if (target.global_position.x > global_position.x && sprite.scale.x < 0):
		sprite.scale.x *=-1
	
func _process(delta):
	move_reticle()
	process_statemachine(delta)
	pass
	
func _integrate_forces(pstate):
	pstate.angular_velocity = 0
	pstate.linear_velocity = lerp(pstate.linear_velocity, target_velocity, .25)
	var t = Transform2D(0, pstate.transform.origin)
	pstate.transform = t
	
func change(new_state):
	state = new_state
	state_time = 0

func player_move_input():
	var x = Input.get_action_strength(\"player_move_right\") - Input.get_action_strength(\"player_move_left\")
	var y = -Input.get_action_strength(\"player_move_up\") + Input.get_action_strength(\"player_move_down\")
	return Vector2(x, y)

func try_dash():
	if (Input.is_action_just_pressed(\"dash\")):
		change(PlayerStates.enter_dash)
		return true
	return false

func get_forward():
	return (target.global_position - global_position).normalized()

func try_shoot():
	if (Input.is_action_just_pressed(\"player_shoot\")):
		var bullet = load(\"res://Pete/Bullet/Bullet.tscn\").instance()
		bullet.global_position = global_position + get_forward()* 25
		bullet.velocity = get_forward()
		get_tree().current_scene.add_child(bullet)
		change(PlayerStates.enter_attack)

var count = 0
func process_statemachine(delta):
	count += 1
	state_time += delta
	
	match (state):
		PlayerStates.enter_idle:
			animator.play(\"Player-IdleAnim\")
			change(PlayerStates.idle)
			
		PlayerStates.idle:
			target_velocity = Vector2.ZERO
			if (player_move_input().length() > .1):
				change(PlayerStates.enter_run)
			if (try_dash()):
				target_velocity = get_forward()
			look_at_target()
			try_shoot()
		
		PlayerStates.enter_run:
			animator.play(\"Player-RunAnim\")
			change(PlayerStates.run)
		
		PlayerStates.run:
			if (player_move_input().length() < .1):
				change(PlayerStates.enter_idle)
			target_velocity = player_move_input() * run_speed
			try_dash()
			look_at_target()
			try_shoot()
		
		PlayerStates.enter_attack:
			animator.play(\"Player-AttackAnim\")
			animator.seek(0);
			change(PlayerStates.attack)
		
		PlayerStates.attack:
			target_velocity = player_move_input() * run_speed * .75
			try_dash()
			look_at_target()
			try_shoot()
			if (!animator.is_playing()):
				change(PlayerStates.enter_idle)
		
		PlayerStates.enter_dash:
			animator.play(\"Player-DashAnim\")
			change(PlayerStates.dash)
		
		PlayerStates.dash:
			if (state == PlayerStates.idle):
				target_velocity = target.global_position - global_position
			target_velocity = target_velocity.normalized() * (dash_speed + run_speed)
			
			if (target_velocity.x < 0 && sprite.scale.x > 0):
				sprite.scale.x *= -1
			else:
				if (target_velocity.x > 0 && sprite.scale.x < 0):
					sprite.scale.x *= -1
			
			if (state_time > .25):
				change(PlayerStates.enter_idle)
		
		PlayerStates.enter_damage:
			var effect = hit_effect.instance()
			effect.scale = Vector2(.25, .25)
			get_tree().current_scene.add_child(effect)
			effect.global_position = global_position
			change(PlayerStates.damage)
		
		PlayerStates.damage:
			target_velocity = lerp(recoil_velocity, player_move_input() * run_speed, state_time * 2)
			modulate = lerp(Color.white, Color.red, sin(state_time * 10))
			if (state_time > .25):
				change(PlayerStates.enter_idle)
				modulate = Color.white
		
		PlayerStates.death:
			target_velocity = Vector2.ZERO
			modulate = Color(.2, .2, .2)
			var game_over = load(\"res://Scenes/Game Over/Game_Over.tscn\").instance()
			get_tree().current_scene.add_child(game_over)

# warning-ignore:unused_signal
signal on_damage(amount, recoil_direction)

func _on_Player_on_damage(amount, recoil_direction):
	if (god_mode):
		return
	health -= amount
	if (health <= 0):
		change(PlayerStates.death)
	else:
		change(PlayerStates.enter_damage)
		recoil_velocity = recoil_direction
"

[sub_resource type="CircleShape2D" id=2]
radius = 33.9532

[sub_resource type="GDScript" id=3]
script/source = "extends Node2D

var heart = load(\"res://Pete/Player/Health_Point.tscn\")


func _process(delta):
	var count = Game.player.health - get_child_count()
	var child_count = get_child_count()
	if (count > 0):
		for _n in range(count):
			add_child(heart.instance())
	if (count < 0):
		for _n in range(-count):
			get_child(child_count - _n - 1).kill = true

	if (count != 0):
		for n in range(get_child_count()):
			get_child(n).position.x = n * 50
"

[node name="Player" type="RigidBody2D"]
rotation = -0.00908171
collision_layer = 2
gravity_scale = 0.0
can_sleep = false
script = SubResource( 1 )
run_speed = 400

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource( 2 )

[node name="Target" type="Node2D" parent="."]
position = Vector2( 88.9209, -22.318 )

[node name="cross_hair" type="Sprite" parent="Target"]
modulate = Color( 1, 0.117647, 0, 1 )
scale = Vector2( 0.263893, 0.263893 )
texture = ExtResource( 1 )

[node name="PlayerCamera" type="Camera2D" parent="."]
current = true

[node name="HuD" type="CanvasLayer" parent="."]

[node name="Health Bar" type="Node2D" parent="HuD"]
position = Vector2( 50.0565, 50.0565 )
script = SubResource( 3 )

[node name="Sprite" parent="." instance=ExtResource( 2 )]
position = Vector2( 2.51973, 0.0228841 )
scale = Vector2( 0.361, 0.361 )
[connection signal="on_damage" from="." to="." method="_on_Player_on_damage"]
